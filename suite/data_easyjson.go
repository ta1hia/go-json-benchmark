// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package suite

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite(in *jlexer.Lexer, out *SmallPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "host":
			out.Host = string(in.String())
		case "port":
			out.Port = int(in.Int())
		case "public":
			out.Public = string(in.String())
		case "paginate":
			easyjson794297d0Decode(in, &out.Paginate)
		case "mongodb":
			out.Mongodb = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite(out *jwriter.Writer, in SmallPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"host\":"
		out.RawString(prefix[1:])
		out.String(string(in.Host))
	}
	{
		const prefix string = ",\"port\":"
		out.RawString(prefix)
		out.Int(int(in.Port))
	}
	{
		const prefix string = ",\"public\":"
		out.RawString(prefix)
		out.String(string(in.Public))
	}
	{
		const prefix string = ",\"paginate\":"
		out.RawString(prefix)
		easyjson794297d0Encode(out, in.Paginate)
	}
	{
		const prefix string = ",\"mongodb\":"
		out.RawString(prefix)
		out.String(string(in.Mongodb))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SmallPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SmallPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SmallPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SmallPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite(l, v)
}
func easyjson794297d0Decode(in *jlexer.Lexer, out *struct {
	Default int `json:"default"`
	Max     int `json:"max"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "default":
			out.Default = int(in.Int())
		case "max":
			out.Max = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode(out *jwriter.Writer, in struct {
	Default int `json:"default"`
	Max     int `json:"max"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"default\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Default))
	}
	{
		const prefix string = ",\"max\":"
		out.RawString(prefix)
		out.Int(int(in.Max))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite1(in *jlexer.Lexer, out *LargePayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "areaNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AreaNames = make(map[string]string)
				} else {
					out.AreaNames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 string
					v1 = string(in.String())
					(out.AreaNames)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "audienceSubCategoryNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.AudienceSubCategoryNames = make(map[string]string)
				} else {
					out.AudienceSubCategoryNames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 string
					v2 = string(in.String())
					(out.AudienceSubCategoryNames)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		case "events":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Events = make(map[string]struct {
						Description interface{} `json:"description"`
						ID          int         `json:"id"`
						Logo        interface{} `json:"logo"`
						Name        string      `json:"name"`
						SubTopicIds []int       `json:"subTopicIds"`
						SubjectCode interface{} `json:"subjectCode"`
						Subtitle    interface{} `json:"subtitle"`
						TopicIds    []int       `json:"topicIds"`
					})
				} else {
					out.Events = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v3 struct {
						Description interface{} `json:"description"`
						ID          int         `json:"id"`
						Logo        interface{} `json:"logo"`
						Name        string      `json:"name"`
						SubTopicIds []int       `json:"subTopicIds"`
						SubjectCode interface{} `json:"subjectCode"`
						Subtitle    interface{} `json:"subtitle"`
						TopicIds    []int       `json:"topicIds"`
					}
					easyjson794297d0Decode1(in, &v3)
					(out.Events)[key] = v3
					in.WantComma()
				}
				in.Delim('}')
			}
		case "performances":
			if in.IsNull() {
				in.Skip()
				out.Performances = nil
			} else {
				in.Delim('[')
				if out.Performances == nil {
					if !in.IsDelim(']') {
						out.Performances = make([]struct {
							EventID int         `json:"eventId"`
							ID      int         `json:"id"`
							Logo    interface{} `json:"logo"`
							Name    interface{} `json:"name"`
							Prices  []struct {
								Amount                int `json:"amount"`
								AudienceSubCategoryID int `json:"audienceSubCategoryId"`
								SeatCategoryID        int `json:"seatCategoryId"`
							} `json:"prices"`
							SeatCategories []struct {
								Areas []struct {
									AreaID   int           `json:"areaId"`
									BlockIds []interface{} `json:"blockIds"`
								} `json:"areas"`
								SeatCategoryID int `json:"seatCategoryId"`
							} `json:"seatCategories"`
							SeatMapImage interface{} `json:"seatMapImage"`
							Start        int64       `json:"start"`
							VenueCode    string      `json:"venueCode"`
						}, 0, 1)
					} else {
						out.Performances = []struct {
							EventID int         `json:"eventId"`
							ID      int         `json:"id"`
							Logo    interface{} `json:"logo"`
							Name    interface{} `json:"name"`
							Prices  []struct {
								Amount                int `json:"amount"`
								AudienceSubCategoryID int `json:"audienceSubCategoryId"`
								SeatCategoryID        int `json:"seatCategoryId"`
							} `json:"prices"`
							SeatCategories []struct {
								Areas []struct {
									AreaID   int           `json:"areaId"`
									BlockIds []interface{} `json:"blockIds"`
								} `json:"areas"`
								SeatCategoryID int `json:"seatCategoryId"`
							} `json:"seatCategories"`
							SeatMapImage interface{} `json:"seatMapImage"`
							Start        int64       `json:"start"`
							VenueCode    string      `json:"venueCode"`
						}{}
					}
				} else {
					out.Performances = (out.Performances)[:0]
				}
				for !in.IsDelim(']') {
					var v4 struct {
						EventID int         `json:"eventId"`
						ID      int         `json:"id"`
						Logo    interface{} `json:"logo"`
						Name    interface{} `json:"name"`
						Prices  []struct {
							Amount                int `json:"amount"`
							AudienceSubCategoryID int `json:"audienceSubCategoryId"`
							SeatCategoryID        int `json:"seatCategoryId"`
						} `json:"prices"`
						SeatCategories []struct {
							Areas []struct {
								AreaID   int           `json:"areaId"`
								BlockIds []interface{} `json:"blockIds"`
							} `json:"areas"`
							SeatCategoryID int `json:"seatCategoryId"`
						} `json:"seatCategories"`
						SeatMapImage interface{} `json:"seatMapImage"`
						Start        int64       `json:"start"`
						VenueCode    string      `json:"venueCode"`
					}
					easyjson794297d0Decode2(in, &v4)
					out.Performances = append(out.Performances, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatCategoryNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SeatCategoryNames = make(map[string]string)
				} else {
					out.SeatCategoryNames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 string
					v5 = string(in.String())
					(out.SeatCategoryNames)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		case "subTopicNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.SubTopicNames = make(map[string]string)
				} else {
					out.SubTopicNames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v6 string
					v6 = string(in.String())
					(out.SubTopicNames)[key] = v6
					in.WantComma()
				}
				in.Delim('}')
			}
		case "topicNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TopicNames = make(map[string]string)
				} else {
					out.TopicNames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 string
					v7 = string(in.String())
					(out.TopicNames)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "topicSubTopics":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.TopicSubTopics = make(map[string]string)
				} else {
					out.TopicSubTopics = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v8 string
					v8 = string(in.String())
					(out.TopicSubTopics)[key] = v8
					in.WantComma()
				}
				in.Delim('}')
			}
		case "venueNames":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.VenueNames = make(map[string]string)
				} else {
					out.VenueNames = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.VenueNames)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite1(out *jwriter.Writer, in LargePayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"areaNames\":"
		out.RawString(prefix[1:])
		if in.AreaNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v10First := true
			for v10Name, v10Value := range in.AreaNames {
				if v10First {
					v10First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v10Name))
				out.RawByte(':')
				out.String(string(v10Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"audienceSubCategoryNames\":"
		out.RawString(prefix)
		if in.AudienceSubCategoryNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.AudienceSubCategoryNames {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"events\":"
		out.RawString(prefix)
		if in.Events == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.Events {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				easyjson794297d0Encode1(out, v12Value)
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"performances\":"
		out.RawString(prefix)
		if in.Performances == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v13, v14 := range in.Performances {
				if v13 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0Encode2(out, v14)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatCategoryNames\":"
		out.RawString(prefix)
		if in.SeatCategoryNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v15First := true
			for v15Name, v15Value := range in.SeatCategoryNames {
				if v15First {
					v15First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v15Name))
				out.RawByte(':')
				out.String(string(v15Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"subTopicNames\":"
		out.RawString(prefix)
		if in.SubTopicNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v16First := true
			for v16Name, v16Value := range in.SubTopicNames {
				if v16First {
					v16First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v16Name))
				out.RawByte(':')
				out.String(string(v16Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"topicNames\":"
		out.RawString(prefix)
		if in.TopicNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v17First := true
			for v17Name, v17Value := range in.TopicNames {
				if v17First {
					v17First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v17Name))
				out.RawByte(':')
				out.String(string(v17Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"topicSubTopics\":"
		out.RawString(prefix)
		if in.TopicSubTopics == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v18First := true
			for v18Name, v18Value := range in.TopicSubTopics {
				if v18First {
					v18First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v18Name))
				out.RawByte(':')
				out.String(string(v18Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"venueNames\":"
		out.RawString(prefix)
		if in.VenueNames == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v19First := true
			for v19Name, v19Value := range in.VenueNames {
				if v19First {
					v19First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v19Name))
				out.RawByte(':')
				out.String(string(v19Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LargePayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LargePayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LargePayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LargePayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite1(l, v)
}
func easyjson794297d0Decode2(in *jlexer.Lexer, out *struct {
	EventID int         `json:"eventId"`
	ID      int         `json:"id"`
	Logo    interface{} `json:"logo"`
	Name    interface{} `json:"name"`
	Prices  []struct {
		Amount                int `json:"amount"`
		AudienceSubCategoryID int `json:"audienceSubCategoryId"`
		SeatCategoryID        int `json:"seatCategoryId"`
	} `json:"prices"`
	SeatCategories []struct {
		Areas []struct {
			AreaID   int           `json:"areaId"`
			BlockIds []interface{} `json:"blockIds"`
		} `json:"areas"`
		SeatCategoryID int `json:"seatCategoryId"`
	} `json:"seatCategories"`
	SeatMapImage interface{} `json:"seatMapImage"`
	Start        int64       `json:"start"`
	VenueCode    string      `json:"venueCode"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "eventId":
			out.EventID = int(in.Int())
		case "id":
			out.ID = int(in.Int())
		case "logo":
			if m, ok := out.Logo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Logo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Logo = in.Interface()
			}
		case "name":
			if m, ok := out.Name.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Name.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Name = in.Interface()
			}
		case "prices":
			if in.IsNull() {
				in.Skip()
				out.Prices = nil
			} else {
				in.Delim('[')
				if out.Prices == nil {
					if !in.IsDelim(']') {
						out.Prices = make([]struct {
							Amount                int `json:"amount"`
							AudienceSubCategoryID int `json:"audienceSubCategoryId"`
							SeatCategoryID        int `json:"seatCategoryId"`
						}, 0, 2)
					} else {
						out.Prices = []struct {
							Amount                int `json:"amount"`
							AudienceSubCategoryID int `json:"audienceSubCategoryId"`
							SeatCategoryID        int `json:"seatCategoryId"`
						}{}
					}
				} else {
					out.Prices = (out.Prices)[:0]
				}
				for !in.IsDelim(']') {
					var v20 struct {
						Amount                int `json:"amount"`
						AudienceSubCategoryID int `json:"audienceSubCategoryId"`
						SeatCategoryID        int `json:"seatCategoryId"`
					}
					easyjson794297d0Decode3(in, &v20)
					out.Prices = append(out.Prices, v20)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatCategories":
			if in.IsNull() {
				in.Skip()
				out.SeatCategories = nil
			} else {
				in.Delim('[')
				if out.SeatCategories == nil {
					if !in.IsDelim(']') {
						out.SeatCategories = make([]struct {
							Areas []struct {
								AreaID   int           `json:"areaId"`
								BlockIds []interface{} `json:"blockIds"`
							} `json:"areas"`
							SeatCategoryID int `json:"seatCategoryId"`
						}, 0, 2)
					} else {
						out.SeatCategories = []struct {
							Areas []struct {
								AreaID   int           `json:"areaId"`
								BlockIds []interface{} `json:"blockIds"`
							} `json:"areas"`
							SeatCategoryID int `json:"seatCategoryId"`
						}{}
					}
				} else {
					out.SeatCategories = (out.SeatCategories)[:0]
				}
				for !in.IsDelim(']') {
					var v21 struct {
						Areas []struct {
							AreaID   int           `json:"areaId"`
							BlockIds []interface{} `json:"blockIds"`
						} `json:"areas"`
						SeatCategoryID int `json:"seatCategoryId"`
					}
					easyjson794297d0Decode4(in, &v21)
					out.SeatCategories = append(out.SeatCategories, v21)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatMapImage":
			if m, ok := out.SeatMapImage.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SeatMapImage.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SeatMapImage = in.Interface()
			}
		case "start":
			out.Start = int64(in.Int64())
		case "venueCode":
			out.VenueCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode2(out *jwriter.Writer, in struct {
	EventID int         `json:"eventId"`
	ID      int         `json:"id"`
	Logo    interface{} `json:"logo"`
	Name    interface{} `json:"name"`
	Prices  []struct {
		Amount                int `json:"amount"`
		AudienceSubCategoryID int `json:"audienceSubCategoryId"`
		SeatCategoryID        int `json:"seatCategoryId"`
	} `json:"prices"`
	SeatCategories []struct {
		Areas []struct {
			AreaID   int           `json:"areaId"`
			BlockIds []interface{} `json:"blockIds"`
		} `json:"areas"`
		SeatCategoryID int `json:"seatCategoryId"`
	} `json:"seatCategories"`
	SeatMapImage interface{} `json:"seatMapImage"`
	Start        int64       `json:"start"`
	VenueCode    string      `json:"venueCode"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"eventId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.EventID))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		if m, ok := in.Logo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Logo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Logo))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		if m, ok := in.Name.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Name.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Name))
		}
	}
	{
		const prefix string = ",\"prices\":"
		out.RawString(prefix)
		if in.Prices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v22, v23 := range in.Prices {
				if v22 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0Encode3(out, v23)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatCategories\":"
		out.RawString(prefix)
		if in.SeatCategories == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v24, v25 := range in.SeatCategories {
				if v24 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0Encode4(out, v25)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatMapImage\":"
		out.RawString(prefix)
		if m, ok := in.SeatMapImage.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SeatMapImage.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SeatMapImage))
		}
	}
	{
		const prefix string = ",\"start\":"
		out.RawString(prefix)
		out.Int64(int64(in.Start))
	}
	{
		const prefix string = ",\"venueCode\":"
		out.RawString(prefix)
		out.String(string(in.VenueCode))
	}
	out.RawByte('}')
}
func easyjson794297d0Decode4(in *jlexer.Lexer, out *struct {
	Areas []struct {
		AreaID   int           `json:"areaId"`
		BlockIds []interface{} `json:"blockIds"`
	} `json:"areas"`
	SeatCategoryID int `json:"seatCategoryId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "areas":
			if in.IsNull() {
				in.Skip()
				out.Areas = nil
			} else {
				in.Delim('[')
				if out.Areas == nil {
					if !in.IsDelim(']') {
						out.Areas = make([]struct {
							AreaID   int           `json:"areaId"`
							BlockIds []interface{} `json:"blockIds"`
						}, 0, 2)
					} else {
						out.Areas = []struct {
							AreaID   int           `json:"areaId"`
							BlockIds []interface{} `json:"blockIds"`
						}{}
					}
				} else {
					out.Areas = (out.Areas)[:0]
				}
				for !in.IsDelim(']') {
					var v26 struct {
						AreaID   int           `json:"areaId"`
						BlockIds []interface{} `json:"blockIds"`
					}
					easyjson794297d0Decode5(in, &v26)
					out.Areas = append(out.Areas, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "seatCategoryId":
			out.SeatCategoryID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode4(out *jwriter.Writer, in struct {
	Areas []struct {
		AreaID   int           `json:"areaId"`
		BlockIds []interface{} `json:"blockIds"`
	} `json:"areas"`
	SeatCategoryID int `json:"seatCategoryId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"areas\":"
		out.RawString(prefix[1:])
		if in.Areas == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v27, v28 := range in.Areas {
				if v27 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0Encode5(out, v28)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"seatCategoryId\":"
		out.RawString(prefix)
		out.Int(int(in.SeatCategoryID))
	}
	out.RawByte('}')
}
func easyjson794297d0Decode5(in *jlexer.Lexer, out *struct {
	AreaID   int           `json:"areaId"`
	BlockIds []interface{} `json:"blockIds"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "areaId":
			out.AreaID = int(in.Int())
		case "blockIds":
			if in.IsNull() {
				in.Skip()
				out.BlockIds = nil
			} else {
				in.Delim('[')
				if out.BlockIds == nil {
					if !in.IsDelim(']') {
						out.BlockIds = make([]interface{}, 0, 4)
					} else {
						out.BlockIds = []interface{}{}
					}
				} else {
					out.BlockIds = (out.BlockIds)[:0]
				}
				for !in.IsDelim(']') {
					var v29 interface{}
					if m, ok := v29.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v29.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v29 = in.Interface()
					}
					out.BlockIds = append(out.BlockIds, v29)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode5(out *jwriter.Writer, in struct {
	AreaID   int           `json:"areaId"`
	BlockIds []interface{} `json:"blockIds"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"areaId\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AreaID))
	}
	{
		const prefix string = ",\"blockIds\":"
		out.RawString(prefix)
		if in.BlockIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v30, v31 := range in.BlockIds {
				if v30 > 0 {
					out.RawByte(',')
				}
				if m, ok := v31.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v31.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v31))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson794297d0Decode3(in *jlexer.Lexer, out *struct {
	Amount                int `json:"amount"`
	AudienceSubCategoryID int `json:"audienceSubCategoryId"`
	SeatCategoryID        int `json:"seatCategoryId"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = int(in.Int())
		case "audienceSubCategoryId":
			out.AudienceSubCategoryID = int(in.Int())
		case "seatCategoryId":
			out.SeatCategoryID = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode3(out *jwriter.Writer, in struct {
	Amount                int `json:"amount"`
	AudienceSubCategoryID int `json:"audienceSubCategoryId"`
	SeatCategoryID        int `json:"seatCategoryId"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Amount))
	}
	{
		const prefix string = ",\"audienceSubCategoryId\":"
		out.RawString(prefix)
		out.Int(int(in.AudienceSubCategoryID))
	}
	{
		const prefix string = ",\"seatCategoryId\":"
		out.RawString(prefix)
		out.Int(int(in.SeatCategoryID))
	}
	out.RawByte('}')
}
func easyjson794297d0Decode1(in *jlexer.Lexer, out *struct {
	Description interface{} `json:"description"`
	ID          int         `json:"id"`
	Logo        interface{} `json:"logo"`
	Name        string      `json:"name"`
	SubTopicIds []int       `json:"subTopicIds"`
	SubjectCode interface{} `json:"subjectCode"`
	Subtitle    interface{} `json:"subtitle"`
	TopicIds    []int       `json:"topicIds"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			if m, ok := out.Description.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Description.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Description = in.Interface()
			}
		case "id":
			out.ID = int(in.Int())
		case "logo":
			if m, ok := out.Logo.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Logo.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Logo = in.Interface()
			}
		case "name":
			out.Name = string(in.String())
		case "subTopicIds":
			if in.IsNull() {
				in.Skip()
				out.SubTopicIds = nil
			} else {
				in.Delim('[')
				if out.SubTopicIds == nil {
					if !in.IsDelim(']') {
						out.SubTopicIds = make([]int, 0, 8)
					} else {
						out.SubTopicIds = []int{}
					}
				} else {
					out.SubTopicIds = (out.SubTopicIds)[:0]
				}
				for !in.IsDelim(']') {
					var v32 int
					v32 = int(in.Int())
					out.SubTopicIds = append(out.SubTopicIds, v32)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "subjectCode":
			if m, ok := out.SubjectCode.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.SubjectCode.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.SubjectCode = in.Interface()
			}
		case "subtitle":
			if m, ok := out.Subtitle.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Subtitle.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Subtitle = in.Interface()
			}
		case "topicIds":
			if in.IsNull() {
				in.Skip()
				out.TopicIds = nil
			} else {
				in.Delim('[')
				if out.TopicIds == nil {
					if !in.IsDelim(']') {
						out.TopicIds = make([]int, 0, 8)
					} else {
						out.TopicIds = []int{}
					}
				} else {
					out.TopicIds = (out.TopicIds)[:0]
				}
				for !in.IsDelim(']') {
					var v33 int
					v33 = int(in.Int())
					out.TopicIds = append(out.TopicIds, v33)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode1(out *jwriter.Writer, in struct {
	Description interface{} `json:"description"`
	ID          int         `json:"id"`
	Logo        interface{} `json:"logo"`
	Name        string      `json:"name"`
	SubTopicIds []int       `json:"subTopicIds"`
	SubjectCode interface{} `json:"subjectCode"`
	Subtitle    interface{} `json:"subtitle"`
	TopicIds    []int       `json:"topicIds"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		if m, ok := in.Description.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Description.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Description))
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		if m, ok := in.Logo.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Logo.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Logo))
		}
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"subTopicIds\":"
		out.RawString(prefix)
		if in.SubTopicIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.SubTopicIds {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"subjectCode\":"
		out.RawString(prefix)
		if m, ok := in.SubjectCode.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.SubjectCode.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.SubjectCode))
		}
	}
	{
		const prefix string = ",\"subtitle\":"
		out.RawString(prefix)
		if m, ok := in.Subtitle.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Subtitle.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Subtitle))
		}
	}
	{
		const prefix string = ",\"topicIds\":"
		out.RawString(prefix)
		if in.TopicIds == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.TopicIds {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v37))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite2(in *jlexer.Lexer, out *GeoDataPayload) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "features":
			if in.IsNull() {
				in.Skip()
				out.Features = nil
			} else {
				in.Delim('[')
				if out.Features == nil {
					if !in.IsDelim(']') {
						out.Features = make([]struct {
							Type       string `json:"type"`
							Properties struct {
								Name string `json:"name"`
							} `json:"properties"`
							Geometry struct {
								Type        string        `json:"type"`
								Coordinates [][][]float64 `json:"coordinates"`
							} `json:"geometry"`
						}, 0, 1)
					} else {
						out.Features = []struct {
							Type       string `json:"type"`
							Properties struct {
								Name string `json:"name"`
							} `json:"properties"`
							Geometry struct {
								Type        string        `json:"type"`
								Coordinates [][][]float64 `json:"coordinates"`
							} `json:"geometry"`
						}{}
					}
				} else {
					out.Features = (out.Features)[:0]
				}
				for !in.IsDelim(']') {
					var v38 struct {
						Type       string `json:"type"`
						Properties struct {
							Name string `json:"name"`
						} `json:"properties"`
						Geometry struct {
							Type        string        `json:"type"`
							Coordinates [][][]float64 `json:"coordinates"`
						} `json:"geometry"`
					}
					easyjson794297d0Decode6(in, &v38)
					out.Features = append(out.Features, v38)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite2(out *jwriter.Writer, in GeoDataPayload) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"features\":"
		out.RawString(prefix)
		if in.Features == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v39, v40 := range in.Features {
				if v39 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0Encode6(out, v40)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GeoDataPayload) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GeoDataPayload) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComTahiaKhanGoJsonBenchmarkSuite2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GeoDataPayload) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GeoDataPayload) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComTahiaKhanGoJsonBenchmarkSuite2(l, v)
}
func easyjson794297d0Decode6(in *jlexer.Lexer, out *struct {
	Type       string `json:"type"`
	Properties struct {
		Name string `json:"name"`
	} `json:"properties"`
	Geometry struct {
		Type        string        `json:"type"`
		Coordinates [][][]float64 `json:"coordinates"`
	} `json:"geometry"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "properties":
			easyjson794297d0Decode7(in, &out.Properties)
		case "geometry":
			easyjson794297d0Decode8(in, &out.Geometry)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode6(out *jwriter.Writer, in struct {
	Type       string `json:"type"`
	Properties struct {
		Name string `json:"name"`
	} `json:"properties"`
	Geometry struct {
		Type        string        `json:"type"`
		Coordinates [][][]float64 `json:"coordinates"`
	} `json:"geometry"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"properties\":"
		out.RawString(prefix)
		easyjson794297d0Encode7(out, in.Properties)
	}
	{
		const prefix string = ",\"geometry\":"
		out.RawString(prefix)
		easyjson794297d0Encode8(out, in.Geometry)
	}
	out.RawByte('}')
}
func easyjson794297d0Decode8(in *jlexer.Lexer, out *struct {
	Type        string        `json:"type"`
	Coordinates [][][]float64 `json:"coordinates"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				in.Delim('[')
				if out.Coordinates == nil {
					if !in.IsDelim(']') {
						out.Coordinates = make([][][]float64, 0, 2)
					} else {
						out.Coordinates = [][][]float64{}
					}
				} else {
					out.Coordinates = (out.Coordinates)[:0]
				}
				for !in.IsDelim(']') {
					var v41 [][]float64
					if in.IsNull() {
						in.Skip()
						v41 = nil
					} else {
						in.Delim('[')
						if v41 == nil {
							if !in.IsDelim(']') {
								v41 = make([][]float64, 0, 2)
							} else {
								v41 = [][]float64{}
							}
						} else {
							v41 = (v41)[:0]
						}
						for !in.IsDelim(']') {
							var v42 []float64
							if in.IsNull() {
								in.Skip()
								v42 = nil
							} else {
								in.Delim('[')
								if v42 == nil {
									if !in.IsDelim(']') {
										v42 = make([]float64, 0, 8)
									} else {
										v42 = []float64{}
									}
								} else {
									v42 = (v42)[:0]
								}
								for !in.IsDelim(']') {
									var v43 float64
									v43 = float64(in.Float64())
									v42 = append(v42, v43)
									in.WantComma()
								}
								in.Delim(']')
							}
							v41 = append(v41, v42)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Coordinates = append(out.Coordinates, v41)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode8(out *jwriter.Writer, in struct {
	Type        string        `json:"type"`
	Coordinates [][][]float64 `json:"coordinates"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if in.Coordinates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v44, v45 := range in.Coordinates {
				if v44 > 0 {
					out.RawByte(',')
				}
				if v45 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v46, v47 := range v45 {
						if v46 > 0 {
							out.RawByte(',')
						}
						if v47 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v48, v49 := range v47 {
								if v48 > 0 {
									out.RawByte(',')
								}
								out.Float64(float64(v49))
							}
							out.RawByte(']')
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson794297d0Decode7(in *jlexer.Lexer, out *struct {
	Name string `json:"name"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode7(out *jwriter.Writer, in struct {
	Name string `json:"name"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	out.RawByte('}')
}
